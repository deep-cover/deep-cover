#!/usr/bin/env ruby
module DeepCover
  require 'bundler/setup'

  require_relative '../core_gem/lib/deep_cover'
  require_relative '../core_gem/spec/specs_tools'
  require_relative '../lib/deep_cover/expression_debugger'

  example = ARGV[0] || 'simple_if'
  fn = "./core_gem/spec/samples/#{example}.rb"
  fn = "./core_gem/spec/char_cover/#{example}.rb" unless File.exist?(fn)
  fn = example unless File.exist?(fn)
  if File.exist?(fn)
    fn = File.absolute_path(fn)
    source = File.read(fn)
  else
    fn = '<passed_from_command_line>'
    source = ARGV[0].gsub(';;', "\n")
  end

  groups = Specs::AnnotatedExamplesParser.process(source)
  if groups.size == 1 && groups.first.last.size == 1
    lines, lineno = groups.values.first.values.first
  else
    menu = []
    item = -1
    examples = groups.flat_map do |title, examples|
      menu << Term::ANSIColor.green(title) if title
      menu.concat(examples.keys.map { |ex| "  #{item += 1}: #{ex || '(General)'}" })
      examples.values
    end
    if ARGV[1]
      answer = ARGV[1].to_i
    else
      require 'highline'
      puts menu
      answer = HighLine.new.ask(Term::ANSIColor.blue('Which?  '), Integer) { |q| q.in = 0...examples.size }
    end
    lines, lineno = examples[answer]
  end

  ExpressionDebugger.new(lines.join, filename: fn, lineno: lineno, debug: true, profile: ENV['PROF']).show
end
